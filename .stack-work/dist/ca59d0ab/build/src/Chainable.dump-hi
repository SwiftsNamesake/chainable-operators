
==================== FINAL INTERFACE ====================
2017-03-13 16:22:13.3277003 UTC

interface chained-operators-0.1.0.0-GkBvuZfGoz5312Kp8mtkpo:Chainable 8001
  interface hash: 6a24a27b3263a2e04beb230c4ba27ab7
  ABI hash: 489f869780ba20f7dbb759fdadb8d683
  export-list hash: f0a706aa69e2d7d51f1f5faf613d4b1f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3a25d3d82c0c9103ac0a57c201cf6d5d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Chainable.<.
  Chainable.=.
  Chainable.>.
  Chainable.main
  Chainable.≤
  Chainable.≥
  Chainable.Chainable{Chainable.chainable}
  Chainable.VaryingArg
  Chainable.VaryingFold{Chainable.fold}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:System.IO c1068c4f4231e3198e330f99a58145b0
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
fixities infixr 4 <., infixr 4 =., infixr 4 >., infixr 4 ≤,
         infixr 4 ≥
f205ac7353452803a1dd71360707a90a
  $fChainableInt(,)(,) ::
    Chainable.Chainable
      GHC.Types.Int
      (GHC.Types.Int, GHC.Types.Bool)
      (GHC.Types.Int, GHC.Types.Bool)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,U><S,1*U(U,1*U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Chainable.$fChainableInt(,)(,)_$cchainable
                  `cast`
                (Sym (Chainable.N:Chainable[0]
                          <GHC.Types.Int>_N
                          <(GHC.Types.Int, GHC.Types.Bool)>_N
                          <(GHC.Types.Int, GHC.Types.Bool)>_N)) -}
7014d7b90b16cd2c2161ccb2001198ad
  $fChainableInt(,)(,)_$cchainable ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Bool)
    -> (GHC.Types.Int, GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,U><S,1*U(U,1*U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (a :: GHC.Types.Int)
                   (ds :: (GHC.Types.Int, GHC.Types.Bool)) ->
                 case ds of wild { (,) carried previous ->
                 (a,
                  case f a carried of wild1 {
                    GHC.Types.False -> GHC.Types.False
                    GHC.Types.True -> previous }) }) -}
f205ac7353452803a1dd71360707a90a
  $fChainableInt(,)Bool ::
    Chainable.Chainable
      GHC.Types.Int (GHC.Types.Int, GHC.Types.Bool) GHC.Types.Bool
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Chainable.$fChainableInt(,)Bool_$cchainable
                  `cast`
                (Sym (Chainable.N:Chainable[0]
                          <GHC.Types.Int>_N
                          <(GHC.Types.Int, GHC.Types.Bool)>_N
                          <GHC.Types.Bool>_N)) -}
08fcfc57a45b7801fdea866301bdca7f
  $fChainableInt(,)Bool_$cchainable ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Bool)
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(U,1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (a :: GHC.Types.Int)
                   (ds :: (GHC.Types.Int, GHC.Types.Bool)) ->
                 case ds of wild { (,) carried previous ->
                 case f a carried of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> previous } }) -}
f205ac7353452803a1dd71360707a90a
  $fChainableIntInt(,) ::
    Chainable.Chainable
      GHC.Types.Int GHC.Types.Int (GHC.Types.Int, GHC.Types.Bool)
  DFunId
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><L,U>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Chainable.$fChainableIntInt(,)_$cchainable
                  `cast`
                (Sym (Chainable.N:Chainable[0]
                          <GHC.Types.Int>_N
                          <GHC.Types.Int>_N
                          <(GHC.Types.Int, GHC.Types.Bool)>_N)) -}
e05a892eda21a1bc783020d4a005264f
  $fChainableIntInt(,)_$cchainable ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (a :: GHC.Types.Int)
                   (b :: GHC.Types.Int) ->
                 (a, f a b)) -}
f205ac7353452803a1dd71360707a90a
  $fChainableIntIntBool ::
    Chainable.Chainable GHC.Types.Int GHC.Types.Int GHC.Types.Bool
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Chainable.$fChainableIntIntBool_$cchainable
                  `cast`
                (Sym (Chainable.N:Chainable[0]
                          <GHC.Types.Int>_N <GHC.Types.Int>_N <GHC.Types.Bool>_N)) -}
be8492e98e3f6bc94e54e2df005dc476
  $fChainableIntIntBool_$cchainable ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   (a :: GHC.Types.Int)
                   (b :: GHC.Types.Int) ->
                 f a b) -}
c716b7041dd82a731292ea966975e5c7
  $fVaryingArgInt :: Chainable.VaryingArg GHC.Types.Int
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ GHC.Types.Int -}
c716b7041dd82a731292ea966975e5c7
  $fVaryingArg[] :: Chainable.VaryingArg [GHC.Types.Char]
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ [GHC.Types.Char] -}
b0f7dfecbadfcce8c9b4a6eb80eca694
  $fVaryingFoldab(->) ::
    (Chainable.VaryingArg a, Chainable.VaryingFold a b c) =>
    Chainable.VaryingFold a b (a -> c)
  DFunId
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U><C(C(C(C(S)))),U><L,A><L,A><L,U><L,U><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Chainable.$fVaryingFoldab(->)_$cfold
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Chainable.VaryingArg a>_R
                 ->_R <Chainable.VaryingFold a b c>_R
                 ->_R Sym (Chainable.N:VaryingFold[0] <a>_N <b>_N <a -> c>_N)) -}
b0f7dfecbadfcce8c9b4a6eb80eca694
  $fVaryingFoldab(->)_$cfold ::
    (Chainable.VaryingArg a, Chainable.VaryingFold a b c,
     Chainable.VaryingArg a, Chainable.VaryingFold a b (a -> c)) =>
    (b -> a -> b) -> b -> a -> c
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U><C(C(C(C(S)))),U><L,A><L,A><L,U><L,U><L,U>,
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dVaryingArg :: Chainable.VaryingArg a)
                   ($dVaryingFold :: Chainable.VaryingFold a b c)
                   ($dVaryingArg1 :: Chainable.VaryingArg a)
                   ($dVaryingFold1 :: Chainable.VaryingFold a b (a -> c))
                   (f :: b -> a -> b)
                   (b1 :: b)
                   (a1 :: a) ->
                 $dVaryingFold `cast` (Chainable.N:VaryingFold[0] <a>_N <b>_N <c>_N)
                   $dVaryingArg
                   $dVaryingFold
                   f
                   (f b1 a1)) -}
b0f7dfecbadfcce8c9b4a6eb80eca694
  $fVaryingFoldabb :: Chainable.VaryingFold a b b
  DFunId
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Chainable.$fVaryingFoldabb_$cfold
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Chainable.N:VaryingFold[0] <a>_N <b>_N <b>_N)) -}
b0f7dfecbadfcce8c9b4a6eb80eca694
  $fVaryingFoldabb_$cfold ::
    (Chainable.VaryingArg a, Chainable.VaryingFold a b b) =>
    (b -> a -> b) -> b -> b
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><S,1*U>,
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   ($dVaryingArg :: Chainable.VaryingArg a)
                   ($dVaryingFold :: Chainable.VaryingFold a b b)
                   (f :: b -> a -> b)
                   (acc :: b) ->
                 acc) -}
776901f79e9863bfb9e43b8863188ac6
  $tc'C:Chainable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10120531650541352006##
                   2059635508318888547##
                   Chainable.$trModule
                   Chainable.$tc'C:Chainable1) -}
aea6df2a31cac9f1a19976ee6a510959
  $tc'C:Chainable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Chainable"#) -}
2e9f7643578c7f8eb7ad3352834b7884
  $tc'C:VaryingArg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12666449719326710373##
                   18277838235565142249##
                   Chainable.$trModule
                   Chainable.$tc'C:VaryingArg1) -}
66a5034699c97ab2489ade051aea94bd
  $tc'C:VaryingArg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:VaryingArg"#) -}
a4d143d4e7b093966ad7c2f933e3d55c
  $tc'C:VaryingFold :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13700303497943566151##
                   12036117142148499885##
                   Chainable.$trModule
                   Chainable.$tc'C:VaryingFold1) -}
0e4987a1a79af00a80412cd3369154be
  $tc'C:VaryingFold1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:VaryingFold"#) -}
df1a17587a0b956be1fc2611b31e4e80
  $tcChainable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4049653862999745030##
                   9344585943014238297##
                   Chainable.$trModule
                   Chainable.$trModule1) -}
62c667f23503487e8e95207115f44227
  $tcVaryingArg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4242625051499146351##
                   16403086074586087323##
                   Chainable.$trModule
                   Chainable.$tcVaryingArg1) -}
b8de190347ef8ebb62ae07b3007d2dfa
  $tcVaryingArg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VaryingArg"#) -}
4492aa29a48d6a468ef1926f081085e1
  $tcVaryingFold :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6921670170995479184##
                   15947737044621822096##
                   Chainable.$trModule
                   Chainable.$tcVaryingFold1) -}
84be194049529c07551141bed82a9645
  $tcVaryingFold1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VaryingFold"#) -}
80ff40fd897202af526ad175bfb389e3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Chainable.$trModule2
                   Chainable.$trModule1) -}
70f756c5e764c8407822f636b56e5f22
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chainable"#) -}
f077fb94a680f6cf0473bcb33332b73d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "chained-operators-0.1.0.0-GkBvuZfGoz5312Kp8mtkpo"#) -}
ae1a3b61ba7fda51555b057ff146ab15
  (<.) ::
    (Chainable.Chainable a b c, GHC.Classes.Ord a) => a -> b -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dChainable :: Chainable.Chainable a b c)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 $dChainable `cast` (Chainable.N:Chainable[0] <a>_N <b>_N <c>_N)
                   (GHC.Classes.< @ a $dOrd)) -}
845495d9a84d79eb7c4c8a8e1eaa3558
  (=.) ::
    (Chainable.Chainable a b c, GHC.Classes.Eq a) => a -> b -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dChainable :: Chainable.Chainable a b c)
                   ($dEq :: GHC.Classes.Eq a) ->
                 $dChainable `cast` (Chainable.N:Chainable[0] <a>_N <b>_N <c>_N)
                   (GHC.Classes.== @ a $dEq)) -}
15013fdf703a7aaa24660862212098ef
  (>.) ::
    (Chainable.Chainable a b c, GHC.Classes.Ord a) => a -> b -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dChainable :: Chainable.Chainable a b c)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 $dChainable `cast` (Chainable.N:Chainable[0] <a>_N <b>_N <c>_N)
                   (GHC.Classes.> @ a $dOrd)) -}
f205ac7353452803a1dd71360707a90a
  class Chainable a b c | b -> a where
    chainable :: (a -> a -> GHC.Types.Bool) -> a -> b -> c
    {-# MINIMAL chainable #-}
c716b7041dd82a731292ea966975e5c7
  class VaryingArg a
b0f7dfecbadfcce8c9b4a6eb80eca694
  class VaryingFold a b c where
    fold :: (Chainable.VaryingArg a, Chainable.VaryingFold a b c) =>
            (b -> a -> b) -> b -> c
    RecFlag: Recursive
    {-# MINIMAL fold #-}
639e3121f0280b81d37726977a7356da
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Chainable.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
37cbd161df28a374b17c5b91d18c5e17
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Chainable.main6
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Chainable.main2
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   GHC.Show.shows20
                   GHC.Types.True
                   ipv2 } }) -}
fb4067189469034ad733f12053aa61fc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   Chainable.main3) -}
eaac5101da8b7c9e318439b00b3d9734
  main3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Chainable.main5
                   Chainable.main4) -}
24dd01ea6ddb5a928ac38d4a52e4e52e
  main4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf5f9a1c64bff60008cb136cd8e4fe78
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hello World"#) -}
62a3f3e13db49fd6044d0fd08003e9f7
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Let's see if it works"#) -}
f95c3e3f0077d087be5b55296c104df1
  (≤) ::
    (Chainable.Chainable a b c, GHC.Classes.Ord a) => a -> b -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dChainable :: Chainable.Chainable a b c)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 $dChainable `cast` (Chainable.N:Chainable[0] <a>_N <b>_N <c>_N)
                   (GHC.Classes.<= @ a $dOrd)) -}
cbf902c417fb89f696ac738361fa00e6
  (≥) ::
    (Chainable.Chainable a b c, GHC.Classes.Ord a) => a -> b -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dChainable :: Chainable.Chainable a b c)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 $dChainable `cast` (Chainable.N:Chainable[0] <a>_N <b>_N <c>_N)
                   (GHC.Classes.>= @ a $dOrd)) -}
instance [safe] Chainable.Chainable [GHC.Types.Int, (,), (,)]
  = Chainable.$fChainableInt(,)(,)
instance [safe] Chainable.Chainable [GHC.Types.Int, (,),
                                     GHC.Types.Bool]
  = Chainable.$fChainableInt(,)Bool
instance [safe] Chainable.Chainable [GHC.Types.Int, GHC.Types.Int,
                                     (,)]
  = Chainable.$fChainableIntInt(,)
instance [safe] Chainable.Chainable [GHC.Types.Int, GHC.Types.Int,
                                     GHC.Types.Bool]
  = Chainable.$fChainableIntIntBool
instance [safe] Chainable.VaryingArg [GHC.Types.Int]
  = Chainable.$fVaryingArgInt
instance [safe] Chainable.VaryingArg [[]]
  = Chainable.$fVaryingArg[]
instance [safe] Chainable.VaryingFold [., ., (->)]
  = Chainable.$fVaryingFoldab(->)
instance [safe] Chainable.VaryingFold [., ., .]
  = Chainable.$fVaryingFoldabb
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

